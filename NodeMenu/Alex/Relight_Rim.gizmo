#! /usr/local/Nuke6.2v4/Nuke6.2 -nx

Group {
 name Relight_Rim
 inputs 2
 help "Connect an attenuation map (i.e. map showing Viewing vector,or  normalized -I, like a light shining down the cam +Z axis) and a normal map. The order of the two inputs  is irrelevant. The result is similar to a rim lighting shader, with controls for the width and intensity of the effect."
 tile_color 0x4c00ff
 note_font "Bitstream Vera Sans"
 mapsize {0.15 0.15}
 addUserKnob {20 "" l User}
 addUserKnob {7 RimLighting_UserEdgeWidth l "Edge Width"}
 RimLighting_UserEdgeWidth 0.5
 addUserKnob {7 RimLighting_UserEdgeAmount l "Edge Amount"}
 RimLighting_UserEdgeAmount 1
 addUserKnob {12 rim_light_pos l "Rim Light Position"}
 rim_light_pos {535 885}
 addUserKnob {7 rim_depth l "Distance from Camera" R 0 5000}
 rim_depth 720
 addUserKnob {26 ""}
 addUserKnob {6 nn l "Normalize the Normals?" -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {18 gamma_cc l "Gamma CC" R 0 5}
 gamma_cc {1 1 1}
 addUserKnob {18 gain_cc l "Gain CC" R 0 5}
 gain_cc 1.55
 addUserKnob {7 cc_mix l "CC Mix"}
 cc_mix 1
}
 Input {
  inputs 0
  name N
  xpos -236
  ypos -166
 }
set Nf32c06d0 [stack 0]
 Dot {
  name Dot4
  xpos 68
  ypos -161
 }
 Dot {
  name Dot5
  xpos 68
  ypos 465
 }
 Input {
  inputs 0
  name P
  xpos -473
  ypos 100
  number 1
 }
 Dot {
  name Dot1
  xpos -352
  ypos 105
 }
set N5412bd80 [stack 0]
push $Nf32c06d0
 Multiply {
  channels {-rgba.red -rgba.green rgba.blue -rgba.alpha}
  value -1
  name __SWITCH_HANDEDNESS__
  xpos -236
  ypos -57
  disable true
 }
 Matrix {
  channels rgb
  matrix {
      {1 2 1}
      {2 4 2}
      {1 2 1}
    }
  normalize true
  name AA
  xpos -236
  ypos 6
 }
 Expression {
  temp_name0 length
  temp_expr0 sqrt(pow2(Bg)+pow2(Br)+pow2(Bb))
  expr0 Br/(length+0.00001)
  expr1 Bg/(length+0.00001)
  expr2 Bb/(length+0.00001)
  expr3 Ba
  name Nn
  xpos -236
  ypos 49
  disable {{nn.0==0}}
 }
set N907a7190 [stack 0]
 MergeExpression {
  inputs 2
  temp_name0 Lr
  temp_expr0 "(parent.rim_light_pos.x - input.width/2)  - Ar"
  temp_name1 Lg
  temp_expr1 "(parent.rim_light_pos.y - input.height/2) - Ag"
  temp_name2 Lb
  temp_expr2 "parent.rim_depth  - Ab"
  temp_name3 Llength
  temp_expr3 sqrt(pow2(Lr)+pow2(Lg)+pow2(Lb))+0.00001
  expr0 (Lr/Llength)*Br+(Lg/Llength)*Bg+(Lb/Llength)*Bb
  expr1 (Lr/Llength)*Br+(Lg/Llength)*Bg+(Lb/Llength)*Bb
  expr2 (Lr/Llength)*Br+(Lg/Llength)*Bg+(Lb/Llength)*Bb
  expr3 Ba
  name LdotN
  xpos -326
  ypos 190
  addUserKnob {20 "" l User}
 }
push $N5412bd80
 Dot {
  name Dot2
  xpos -311
  ypos 28
 }
 Dot {
  name Dot6
  xpos -85
  ypos 28
 }
 Expression {
  temp_name0 Plength
  temp_expr0 sqrt(pow2(Br)+pow2(Bg)+pow2(Bb))+0.00001
  expr0 Br/Plength
  expr1 Bg/Plength
  expr2 Bb/Plength
  name I_normalized
  xpos -119
  ypos 101
 }
 Multiply {
  channels rgb
  value -1
  name V
  xpos -119
  ypos 155
 }
push $N907a7190
 MergeExpression {
  inputs 2
  temp_name0 VdotNf
  temp_expr0 "(Ar*Br) + (Ag*Bg) + (Ab*Bb)"
  temp_name1 edgeWidth
  temp_expr1 parent.RimLighting_UserEdgeWidth
  temp_name2 edgeScale
  temp_expr2 edgeWidth>0?pow(1-VdotNf,log(edgeWidth)/log(0.5)):0
  temp_name3 edgeAmt
  temp_expr3 parent.RimLighting_UserEdgeAmount
  expr0 smoothstep(0,1,edgeAmt*edgeScale)
  expr1 smoothstep(0,1,edgeAmt*edgeScale)
  expr2 smoothstep(0,1,edgeAmt*edgeScale)
  name RimLighting
  xpos -119
  ypos 198
  addUserKnob {20 "" l User}
 }
 Merge2 {
  inputs 2
  operation multiply
  name Multiply2
  xpos -233
  ypos 247
 }
 CCorrect {
  gamma {{gamma_cc.r i} {gamma_cc.g i} {gamma_cc.b i} 1}
  gain {{gain_cc.r i} {gain_cc.g i} {gain_cc.b i} 1}
  mix {{cc_mix}}
  name CCorrect1
  tile_color 0x7aa9ff00
  xpos -233
  ypos 303
 }
 Clamp {
  channels rgb
  name Clamp1
  xpos -233
  ypos 393
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos -233
  ypos 453
 }
 Output {
  name Output2
  xpos -233
  ypos 524
 }
end_group
